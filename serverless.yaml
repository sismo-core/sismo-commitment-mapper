service: sismo-commitment-mapper
frameworkVersion: "3"

custom:
  profiles:
    dev: staging-common
    prod-v1: prod-commitment-mapper-v1
    prod-beta: prod-common
    staging-beta: staging-common
    dev-beta: prod-common
  secret-manager:
    dev:
      name: "commitment-mapper"
    prod-v1:
      name: "commitment-mapper"
    prod-beta:
      name: "commitment-mapper"
    staging-beta:
      name: "commitment-mapper-staging"
    dev-beta:
      name: "commitment-mapper-dev"
  commitmentMapperDynamoDB:
    dev:
      tableNameSuffix: staging
      region: eu-west-1
      role: arn:aws:iam::091325440235:role/commitment-store-dynamodb
    prod-v1:
      tableNameSuffix: prod
      region: eu-west-1
      role: arn:aws:iam::734017092764:role/commitment-store-dynamodb
    prod-beta:
      tableNameSuffix: prod-beta
      region: eu-west-1
      role: arn:aws:iam::214635901820:role/commitment-store-dynamodb-prod-beta # prod-common
    staging-beta:
      tableNameSuffix: staging-beta
      region: eu-west-1
      role: arn:aws:iam::934818791296:role/commitment-store-dynamodb-staging-beta # staging-common
    dev-beta:
      tableNameSuffix: dev-beta
      region: eu-west-1
      role: arn:aws:iam::214635901820:role/commitment-store-dynamodb-dev-beta # prod-common

provider:
  name: aws
  runtime: nodejs14.x
  profile: ${self:custom.profiles.${sls:stage}}
  region: eu-west-1
  memorySize: 2048
  timeout: 20 # optional, in seconds, default is 6
  environment:
    COMMITMENT_STORE_TABLE_SUFFIX: ${self:custom.commitmentMapperDynamoDB.${sls:stage}.tableNameSuffix}
    COMMITMENT_STORE_REGION: ${self:custom.commitmentMapperDynamoDB.${sls:stage}.region}
    COMMITMENT_STORE_ROLE_ARN: ${self:custom.commitmentMapperDynamoDB.${sls:stage}.role}
    COMMITMENT_MAPPER_GITHUB_OAUTH_ID: ${env:COMMITMENT_MAPPER_GITHUB_OAUTH_ID}
    COMMITMENT_MAPPER_GITHUB_OAUTH_SECRET: ${env:COMMITMENT_MAPPER_GITHUB_OAUTH_SECRET}
    COMMITMENT_MAPPER_TWITTER_CONSUMER_KEY: ${env:COMMITMENT_MAPPER_TWITTER_CONSUMER_KEY}
    COMMITMENT_MAPPER_TWITTER_CONSUMER_SECRET: ${env:COMMITMENT_MAPPER_TWITTER_CONSUMER_SECRET}
    COMMITMENT_MAPPER_TWITTER_ACCESS_TOKEN: ${env:COMMITMENT_MAPPER_TWITTER_ACCESS_TOKEN}
    COMMITMENT_MAPPER_TWITTER_ACCESS_TOKEN_SECRET: ${env:COMMITMENT_MAPPER_TWITTER_ACCESS_TOKEN_SECRET}
    COMMITMENT_MAPPER_MIGRATE_PUBKEY_X: ${env:COMMITMENT_MAPPER_MIGRATE_PUBKEY_X}
    COMMITMENT_MAPPER_MIGRATE_PUBKEY_Y: ${env:COMMITMENT_MAPPER_MIGRATE_PUBKEY_Y}
    CACHE_STORE_TABLE_NAME: cache-store-${sls:stage}
    CACHE_STORE_REGION: eu-west-1 
    SECRETS_MANAGER_NAME: ${self:custom.secret-manager.${sls:stage}.name}

  httpApi:
    cors: true

functions:
  commitGithub:
    handler: src/handler.commitGithubEddsa
    provisionedConcurrency: 1
    disableLogs: true
    events:
      - httpApi:
          path: /commit-github-eddsa
          method: POST
    role: commitmentMapperRole

  commitTwitterEddsa:
    handler: src/handler.commitTwitterEddsa
    provisionedConcurrency: 1
    disableLogs: true
    events:
      - httpApi:
          path: /commit-twitter-eddsa
          method: POST
    role: commitmentMapperRole

  commitTwitterV2Eddsa:
    handler: src/handlers/twitter-v2.commitTwitterV2Eddsa
    provisionedConcurrency: 1
    disableLogs: true
    events:
      - httpApi:
          path: /commit-twitter-v2-eddsa
          method: POST
    role: commitmentMapperRole

  getTwitterV2Token:
    handler: src/handlers/twitter-v2.getTwitterV2Token
    events:
      - httpApi:
          path: /get-twitter-access-token
          method: GET
    role: commitmentMapperRole

  getTwitterV2Url:
    handler: src/handlers/twitter-v2.getTwitterV2Url
    events:
      - httpApi:
          path: /get-twitter-url
          method: GET
    role: commitmentMapperRole

  requestTwitterToken:
    handler: src/handler.requestTwitterToken
    disableLogs: true
    events:
      - httpApi:
          path: /request-twitter-token
          method: GET
    role: commitmentMapperRole 
 
  migrateEddsa:
    handler: src/handler.migrateEddsa
    provisionedConcurrency: 2
    disableLogs: true
    events:
      - httpApi:
          path: /migrate-eddsa
          method: POST
    role: commitmentMapperRole

  commit:
    handler: src/handler.commitEthereumEddsa
    provisionedConcurrency: 2
    disableLogs: true
    events:
      - httpApi:
          path: /commit-ethereum-eddsa
          method: POST
      - httpApi:
          path: /commit-eddsa
          method: POST
    role: commitmentMapperRole

  sismoAddressCommitment:
    handler: src/handler.sismoAddressCommitment
    disableLogs: true
    events:
      - httpApi:
          path: /sismo-address-commitment
          method: GET
    role: commitmentMapperRole

  generateSecret:
    handler: src/handler.generateSecret
    role: generateSecretRole

plugins:
  - serverless-plugin-typescript
  - serverless-offline

resources:
  Resources:
    fifoStore:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: fifo-store-${sls:stage}
        AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: N
        KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: SORT
    cacheStore:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: cache-store-${sls:stage}
        AttributeDefinitions:
        - AttributeName: key
          AttributeType: S
        KeySchema:
        - AttributeName: key
          KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TimeToLiveSpecification:
          AttributeName: expiration
          Enabled: true
    commitmentMapperRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /sls/commitment-mapper/
        RoleName: CommitmentMapperCommon-${sls:stage}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: RevealSecret
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - secretsmanager:GetSecretValue
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:secretsmanager"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "secret:${self:custom.secret-manager.${sls:stage}.name}/*"
          - PolicyName: AssumeAMSRole
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - sts:AssumeRole
                  Resource:
                    - ${self:custom.commitmentMapperDynamoDB.${sls:stage}.role}
          - PolicyName: FifoStoreAccess
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:DescribeTable
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                  Resource:
                    - "Fn::GetAtt": [fifoStore, Arn]
          - PolicyName: CacheStoreAccess
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:DescribeTable
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                  Resource:
                    - "Fn::GetAtt": [cacheStore, Arn]
          - PolicyName: PutLogs
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:logs"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "log-group:/aws/lambda/*:*:*"
    generateSecretRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /sls/commitment-mapper/
        RoleName: CommitmentMapperGenerateSecret-${sls:stage}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: DescribeAndCreateSecret
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - secretsmanager:DescribeSecret
                    - secretsmanager:CreateSecret
                  Resource: "*"
          - PolicyName: PutLogs
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:logs"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "log-group:/aws/lambda/*:*:*"
